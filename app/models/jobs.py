import mysql.connector as connector
from itertools import count, filterfalse

from app.models.database import *
import app.models.project as pj

# Inserts a project into the 'project' table.
# val should be of format: (job_id, project_id, qorum_size, done).

def insert_job(val, project):
    """
    Inserts a job into the database.

    :params:
    job_id: PK generated by get_new_job_id function.
    project_id: PK generated by similar function.
    qourum size: Number of volunteers to work on a job.
    done: State of the job, initialized at 0.
    """
    if pj.project_exists(project):
        sql = "INSERT INTO Jobs VALUES (%s, %s, %s, %s)"
        db.cur.execute(sql, val)
        db.con.commit()
        return True
    return False

# Returns the first not in use id in the project table.


def get_new_job_id(project):
    """
    Returns a new job id.

    :params:
    project: project_id to check which job id's have already been taken.
    """
    sql = f"SELECT job_id FROM Jobs WHERE project_id = {project}"
    db.cur.execute(sql)
    ids_taken = [x[0] for x in db.cur.fetchall()]
    return next(filterfalse(set(ids_taken).__contains__, count(1)))



def get_all_jobs_of_project(project):
    """
    Returns all jobs of a given project.

    :params:
    project: project_id to match the project in the database.
    """
    jobs = []
    sql = f"SELECT * FROM Jobs WHERE project_id = {project}"
    db.cur.execute(sql)
    res = db.cur.fetchall()
    for x in res:
        jobs.append(x)
    return jobs


def increment_quorum_size(project_id, job_id):
    """
    Increment quorum size of specific job.

    :params:
    job_id: PK generated by get_new_job_id function.
    project_id: PK generated by similar function.
    """
    query = f"""
    UPDATE Jobs
    SET quorum_size = quorum_size + 1
    WHERE job_id = '{job_id}' AND project_id = '{project_id}'
    """
    db.cur.execute(query)
    db.con.commit()


def possible_jobs(project_id, user_id):
    """
    Returns all possible jobs of a project for a user.

    :params:
    project_id: PK generated by get_new_id function.
    user_id: PK generated by similar function.
    """
    query = f"""
    SELECT job_id, project_id
    FROM Jobs
    WHERE  project_id = '{project_id}' AND Jobs.done = 0 AND '{user_id}' NOT IN (
        SELECT volunteer
        FROM Result
        WHERE Result.job_id = Jobs.job_id AND project_id = '{project_id}'
    )
    """
    db.cur.execute(query)
    res = db.cur.fetchall()
    return res


def submitted_already_for_job(project_id, job_id, user_id):
    """
    Returns A bool indicating whether a user has already submitted a result for a job.

    :params:
    job_id: PK generated by get_new_job_id function.
    project_id: PK generated by similar function.
    user_id: PK generated by similar function.
    """
    query = f"""
    SELECT '{user_id}' IN (
        SELECT volunteer
        FROM Result
        WHERE job_id = '{job_id}' AND project_id = '{project_id}'
    )
    """
    db.cur.execute(query)
    return db.cur.fetchone()[0]

def job_marked_done(project_id, job_id):
    """
    Change the status of a job to done.

    :params:
    job_id: PK generated by get_new_job_id function.
    project_id: PK generated by similar function.
    """
    query = f"""
    SELECT done
    FROM Jobs
    WHERE job_id = '{job_id}' AND project_id = '{project_id}'
    """
    db.cur.execute(query)
    return db.cur.fetchone()[0]
